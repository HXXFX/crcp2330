// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a= instruction, b= fromALUtoMux161andDRegister, sel= instruction[15], out= fromMux161toARegister); //1
    
    And(a = instruction[15], b = instruction[5], out = part1); //Cinstruction and destA(A=A+1)
    Not(in = instruction[15], out = notinstruction15);
    Or(a = part1, b = notinstruction15, out = loadforARegister); //or Ainstruciton
    ARegister(in= fromMux161toARegister,load = loadforARegister, out[0..14]= addressM, out = fromARgistertoPC, out = fromARegistertoMux162); 

    Mux16(a= fromARegistertoMux162, b=inM, sel= instruction[12],out= fromMux162toALU); //2 ////instruction[12] to determent A or M 

    And(a = instruction[15], b = instruction[4], out = turnonDRegisterload); //Cinstruction and destD
    DRegister(in= fromALUtoMux161andDRegister, load = turnonDRegisterload, out= fromDRegistertoALU); 

    ALU(x= fromDRegistertoALU,y= fromMux162toALU,zx= instruction[11],nx= instruction[10],zy= instruction[9],ny= instruction[8],f= instruction[7],no= instruction[6],out= outM, out = fromALUtoMux161andDRegister,  zr= ALUzr,ng= ALUng); 

    Not(in = ALUzr, out = notALUzr);
    Not(in = ALUng, out = notALUng);
    //JGT
    And(a = notALUng, b = notALUzr, out = gtz);
    And(a = gtz, b = instruction[0], out = truejgt); 
    //JEQ
    And(a = ALUzr, b = instruction[1], out = truejeq);
    //JLT
    And(a = ALUng, b = instruction[2], out = truejlt);
    //JGE
    And(a = truejgt, b = truejeq, out = truejge);
    //JLE
    And(a = truejlt, b = truejeq, out = truejle);
    //JNE
    And(a = notALUzr, b = instruction[0], out = tempjne);
    And(a = tempjne, b = instruction[2], out = truejne);
    //JMP
    And(a = instruction[0], b = instruction[1], out = tempjmp);
    And(a = tempjmp, b = instruction[2], out = truejmp);
    //!!!!!!!!!!!!
    Or8Way(in[0] = truejgt, in[1] = truejeq, in[2] = truejlt, in[3] = truejge, in[4] = truejle, in[5] = truejne, in[6] = truejmp, in[7] = false, out = jump);
    And(a = jump, b = instruction[15], out = loadPC);
    PC(in=fromARgistertoPC, load= loadPC, inc=true, reset=reset, out[0..14]=pc); 

    And(a = instruction[15], b = instruction[3], out = writeM);


}